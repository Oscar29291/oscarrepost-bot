const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const path = require("path");

const TOKEN = "–í–ê–®_–¢–û–ö–ï–ù";
const CHANNEL_USERNAME = "@–≤–∞—à_–∫–∞–Ω–∞–ª";
const SCHEDULE_FILE = path.join(__dirname, "schedule.json");

const bot = new TelegramBot(TOKEN, { polling: true });
const pendingAlbums = {};
const monthsRu = [
  "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
  "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
];

// üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
setInterval(() => {
  const now = new Date();
  const schedule = loadSchedule();
  const toPost = schedule.filter(post => {
    const postTime = new Date(post.date + "T" + post.time);
    return now >= postTime && !post.posted;
  });

  toPost.forEach(async post => {
    try {
      await bot.sendMediaGroup(CHANNEL_USERNAME, post.photos);
      post.posted = true;
      saveSchedule(schedule);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", err);
    }
  });
}, 60000);

function loadSchedule() {
  try {
    const data = fs.readFileSync(SCHEDULE_FILE);
    return JSON.parse(data);
  } catch {
    return [];
  }
}

function saveSchedule(data) {
  fs.writeFileSync(SCHEDULE_FILE, JSON.stringify(data, null, 2));
}

// üìÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏
function buildDateKeyboard(year, month, startDay = 1) {
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const keyboard = [];

  for (let i = startDay; i <= daysInMonth; i += 7) {
    const row = [];
    for (let j = i; j < i + 7 && j <= daysInMonth; j++) {
      row.push({ text: j.toString(), callback_data: `date_${year}_${month}_${j}` });
    }
    keyboard.push(row);
  }

  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: `${monthsRu[month]} ${year}`, callback_data: "ignore" }],
        ...keyboard,
      ],
    },
  };
}

// üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on("message", async msg => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (msg.photo) {
    if (!pendingAlbums[userId]) {
      pendingAlbums[userId] = {
        photos: [],
        caption: msg.caption || "",
        chatId,
      };
    }

    pendingAlbums[userId].photos.push({
      type: "photo",
      media: msg.photo[msg.photo.length - 1].file_id,
    });

    if (msg.caption) {
      pendingAlbums[userId].caption = msg.caption;
    }

    const now = new Date();
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", buildDateKeyboard(
      now.getFullYear(), now.getMonth(), now.getDate()
    ));
  }

  // –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
  if (pendingAlbums[userId]?.awaitingTimeInput) {
    const time = msg.text.trim();
    if (!/^\d{1,2}:\d{2}$/.test(time)) {
      return bot.sendMessage(chatId, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú");
    }

    const post = pendingAlbums[userId];
    const dateStr = `${post.scheduledDate.getFullYear()}-${String(post.scheduledDate.getMonth() + 1).padStart(2, "0")}-${String(post.scheduledDate.getDate()).padStart(2, "0")}`;

    saveSchedule([
      ...loadSchedule(),
      {
        date: dateStr,
        time: time,
        caption: post.caption,
        photos: post.photos,
        posted: false,
      },
    ]);

    delete pendingAlbums[userId];
    return bot.sendMessage(chatId, `‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${dateStr} –≤ ${time}`);
  }
});

// ‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async query => {
  const data = query.data;
  const userId = query.from.id;
  const chatId = query.message.chat.id;

  if (!pendingAlbums[userId]) return bot.answerCallbackQuery(query.id, { text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞" });
  if (data === "ignore") return bot.answerCallbackQuery(query.id);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  if (data.startsWith("date_")) {
    const [, year, month, day] = data.split("_").map(Number);
    const now = new Date();
    const chosenDate = new Date(year, month, day);
    pendingAlbums[userId].scheduledDate = chosenDate;

    await bot.answerCallbackQuery(query.id);

    const timeOptions = ["11:00", "16:00", "20:00"];
    const availableTimes = timeOptions.filter(timeStr => {
      if (
        now.getFullYear() === year &&
        now.getMonth() === month &&
        now.getDate() === day
      ) {
        const [h, m] = timeStr.split(":").map(Number);
        const postTime = new Date(year, month, day, h, m);
        return postTime > now;
      }
      return true;
    });

    availableTimes.push("–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é");

    const timeButtons = availableTimes.map(time => [{
      text: time === "–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" ? "üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" : time,
      callback_data: time === "–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" ? "manual_time" : `time_${time}`,
    }]);

    if (timeButtons.length === 1) {
      return bot.sendMessage(chatId, "‚õî –°–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—Å–µ —Å–ª–æ—Ç—ã –ø—Ä–æ—à–ª–∏.");
    }

    return bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", {
      reply_markup: { inline_keyboard: timeButtons },
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
  if (data.startsWith("time_")) {
    const time = data.split("_")[1];
    const post = pendingAlbums[userId];
    const dateStr = `${post.scheduledDate.getFullYear()}-${String(post.scheduledDate.getMonth() + 1).padStart(2, "0")}-${String(post.scheduledDate.getDate()).padStart(2, "0")}`;

    saveSchedule([
      ...loadSchedule(),
      {
        date: dateStr,
        time: time,
        caption: post.caption,
        photos: post.photos,
        posted: false,
      },
    ]);

    delete pendingAlbums[userId];
    return bot.sendMessage(chatId, `‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${dateStr} –≤ ${time}`);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  if (data === "manual_time") {
    pendingAlbums[userId].awaitingTimeInput = true;
    await bot.answerCallbackQuery(query.id);
    return bot.sendMessage(chatId, "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú");
  }
});

