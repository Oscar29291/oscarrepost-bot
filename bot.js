const TelegramBot = require("node-telegram-bot-api");
const mysql = require("mysql2/promise");

const TOKEN = "7722913115:AAEMsjjYap5XvIGdBL8bZQjQ7d3oUBjL5FM";
const CHANNEL_USERNAME = "@diz673";

const bot = new TelegramBot(TOKEN, { polling: true });
const pendingAlbums = {};

const monthsRu = [
  "—è–Ω–≤–∞—Ä—è",
  "—Ñ–µ–≤—Ä–∞–ª—è",
  "–º–∞—Ä—Ç–∞",
  "–∞–ø—Ä–µ–ª—è",
  "–º–∞—è",
  "–∏—é–Ω—è",
  "–∏—é–ª—è",
  "–∞–≤–≥—É—Å—Ç–∞",
  "—Å–µ–Ω—Ç—è–±—Ä—è",
  "–æ–∫—Ç—è–±—Ä—è",
  "–Ω–æ—è–±—Ä—è",
  "–¥–µ–∫–∞–±—Ä—è",
];

// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ MySQL (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway)
const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É
async function addScheduledPost(userId, caption, photos, scheduledDateTime) {
  const dateStr = scheduledDateTime.toISOString().split("T")[0]; // 'YYYY-MM-DD'
  const timeStr = scheduledDateTime.toTimeString().slice(0, 5); // 'HH:MM'
  const photosJson = JSON.stringify(photos);

  await pool.query(
    "INSERT INTO schedule (user_id, caption, photos, date, time, posted) VALUES (?, ?, ?, ?, ?, 0)",
    [userId, caption, photosJson, dateStr, timeStr]
  );
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö (–Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö) –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
async function loadSchedule() {
  const [rows] = await pool.query("SELECT * FROM schedule WHERE posted = 0");
  return rows;
}

// –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, —á—Ç–æ –ø–æ—Ä–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
setInterval(async () => {
  const now = new Date();
  const schedule = await loadSchedule();

  for (const post of schedule) {
    const postTime = new Date(`${post.date}T${post.time}:00`);
    if (now >= postTime && !post.posted) {
      try {
        const photos = JSON.parse(post.photos);
        await bot.sendMediaGroup(CHANNEL_USERNAME, photos);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ - –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
        await pool.query("UPDATE schedule SET posted = 1 WHERE id = ?", [
          post.id,
        ]);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", err);
      }
    }
  }
}, 60 * 1000);

// --- –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä, –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ ---

function buildDateKeyboard(year, month, startDay = 1) {
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const keyboard = [];

  for (let i = startDay; i <= daysInMonth; i += 7) {
    const row = [];
    for (let j = i; j < i + 7 && j <= daysInMonth; j++) {
      row.push({
        text: j.toString(),
        callback_data: `date_${year}_${month}_${j}`,
      });
    }
    keyboard.push(row);
  }

  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: `${monthsRu[month]} ${year}`, callback_data: "ignore" }],
        ...keyboard,
      ],
    },
  };
}

function buildTimeKeyboard(year, month, day) {
  const now = new Date();
  const isToday =
    now.getFullYear() === year &&
    now.getMonth() === month &&
    now.getDate() === day;
  const times = ["11:00", "16:00", "20:00"];

  const buttons = times
    .filter((time) => {
      if (!isToday) return true;
      const [h, m] = time.split(":").map(Number);
      const slotTime = new Date(year, month, day, h, m);
      return slotTime > now;
    })
    .map((time) => ({
      text: time,
      callback_data: `time_${time.replace(":", "_")}`,
    }));

  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }

  rows.push([
    { text: "‚åö –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é", callback_data: "manual_time" },
  ]);

  return {
    reply_markup: {
      inline_keyboard: rows,
    },
  };
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (msg.photo) {
    if (!pendingAlbums[userId]) {
      pendingAlbums[userId] = {
        photos: [],
        caption: msg.caption || "",
        chatId,
      };
    }

    pendingAlbums[userId].photos.push({
      type: "photo",
      media: msg.photo[msg.photo.length - 1].file_id,
    });

    if (msg.caption) {
      pendingAlbums[userId].caption = msg.caption;
    }

    await bot.sendMessage(chatId, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data: "choose_date" }],
          [{ text: "üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data: "post_now" }],
        ],
      },
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
  if (pendingAlbums[userId]?.awaitingTimeInput) {
    const time = msg.text.trim();
    if (!/^\d{1,2}:\d{2}$/.test(time)) {
      return bot.sendMessage(
        chatId,
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
      );
    }

    const post = pendingAlbums[userId];
    const dateStr = `${post.scheduledDate.getFullYear()}-${String(
      post.scheduledDate.getMonth() + 1
    ).padStart(2, "0")}-${String(post.scheduledDate.getDate()).padStart(
      2,
      "0"
    )}`;

    const scheduledDateTime = new Date(`${dateStr}T${time}:00`);

    await addScheduledPost(
      userId,
      post.caption,
      post.photos,
      scheduledDateTime
    );

    delete pendingAlbums[userId];
    return bot.sendMessage(
      chatId,
      `‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${dateStr} –≤ ${time}`
    );
  }
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ ---

bot.on("callback_query", async (query) => {
  const data = query.data;
  const userId = query.from.id;
  const chatId = query.message.chat.id;

  if (!pendingAlbums[userId])
    return bot.answerCallbackQuery(query.id, { text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞." });

  if (data === "ignore") return bot.answerCallbackQuery(query.id);

  if (data === "post_now") {
    const post = pendingAlbums[userId];
    try {
      await bot.sendMediaGroup(CHANNEL_USERNAME, post.photos);
      delete pendingAlbums[userId];
      await bot.answerCallbackQuery(query.id);
      return bot.sendMessage(chatId, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å—Ä–∞–∑—É.");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", err);
      return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.");
    }
  }

  if (data === "choose_date") {
    const now = new Date();
    await bot.sendMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
      buildDateKeyboard(now.getFullYear(), now.getMonth(), now.getDate())
    );
    return bot.answerCallbackQuery(query.id);
  }

  if (data.startsWith("date_")) {
    const [, year, month, day] = data.split("_").map(Number);
    pendingAlbums[userId].scheduledDate = new Date(year, month, day);
    await bot.answerCallbackQuery(query.id);
    return bot.sendMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
      buildTimeKeyboard(year, month, day)
    );
  }

  if (data.startsWith("time_")) {
    const [, hour, minute] = data.split("_").slice(1);
    const post = pendingAlbums[userId];
    const date = post.scheduledDate;
    const dateStr = `${date.getFullYear()}-${String(
      date.getMonth() + 1
    ).padStart(2, "0")}-${String(date.getDate()).padStart(2, "0")}`;

    const scheduledDateTime = new Date(`${dateStr}T${hour}:${minute}:00`);

    await addScheduledPost(
      userId,
      post.caption,
      post.photos,
      scheduledDateTime
    );

    delete pendingAlbums[userId];
    await bot.answerCallbackQuery(query.id);
    return bot.sendMessage(
      chatId,
      `‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${dateStr} –≤ ${hour}:${minute}`
    );
  }

  if (data === "manual_time") {
    pendingAlbums[userId].awaitingTimeInput = true;
    await bot.answerCallbackQuery(query.id);
    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ß–ß:–ú–ú):");
  }
});
